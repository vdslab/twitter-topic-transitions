{"version":3,"sources":["services/algorithms.js","services/scale.js","services/loadData.js","slice.js","components/Responsive.js","components/HorizontalField.js","components/ProjectionView.js","components/TimelineView.js","components/WordBubbleView.js","App.js","index.js","workers/dbscan.worker.js","workers/layout.worker.js","workers/tsne.worker.js"],"names":["dbscan","dbscanWorker","layout","layoutWorker","tsneWorker","tsne","scale","items","screenWidth","screenHeight","length","x","y","s","left","Math","min","map","r","right","max","top","width","height","optimalFontSize","word","fontFamily","fontWeight","text","document","createElementNS","textContent","setAttributeNS","svg","appendChild","body","ok","ng","iter","m","getBBox","sqrt","removeChild","getTime","item","Date","time","tweetPerHour","start","stop","stopTime","tweetCount","loadData","url","a","fetch","response","json","data","timeColor","d3","domain","dailyCount","row","color","topicCircleSize","topics","range","topic","r0","wordCircleSize","words","count","forEach","i","fontSize","eps","wordClusters","clusters","cluster","wordId","pos","wordColor","undefined","initialState","topicClusters","selectionRadius","selectedTopics","selectedWords","minWordCount","discoverTopic","slice","createSlice","name","reducers","state","action","Object","assign","payload","updateSelectionRadius","selectTopics","updateMinWordCount","toggleDiscoverTopic","toggleWord","index","indexOf","Array","from","push","splice","Responsive","render","wrapperRef","useRef","useState","setWidth","setHeight","useEffect","handleResize","current","clientWidth","clientHeight","window","addEventListener","removeEventListener","style","ref","HorizontalField","label","children","className","ProjectionChart","dispatch","useDispatch","useSelector","Set","margin","contentWidth","contentHeight","xScale","cx","yScale","cy","line","timeFormat","viewBox","transform","fill","stroke","strokeWidth","opacity","d","size","has","id","transitionProperty","transitionDuration","transitionTimingFunction","onClick","actions","ProjectionView","position","disabled","type","value","onChange","event","target","bottom","TimelineChart","axisColor","barWidth","barHeightScale","nice","lineYScale","t1","t2","active","some","filter","sWords","topicId","flag","element","topicCount","transitionPropery","maxIndex","reduce","maxItem","textAnchor","dominantBaseline","x1","y1","x2","y2","ticks","TimelineView","WordBubbleChart","wordCount","globalOpacity","localOpacity","WordBubbleView","checked","App","role","aria-label","href","preventDefault","alert","defaultValue","querySelector","requestFullscreen","store","configureStore","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","addMethods","require","methods","module","exports","w","Worker","__webpack_public_path__"],"mappings":"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","file":"static/js/main.285ca2be.chunk.js","sourcesContent":["import dbscanWorker from \"../workers/dbscan.worker.js\";\nimport layoutWorker from \"../workers/layout.worker.js\";\nimport tsneWorker from \"../workers/tsne.worker.js\";\n\nexport const { dbscan } = dbscanWorker();\nexport const { layout } = layoutWorker();\nexport const { tsne } = tsneWorker();\n","export function scale(items, screenWidth, screenHeight) {\n  if (items.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      s: 1,\n    };\n  }\n  const left = Math.min(...items.map(({ x, r }) => x - r));\n  const right = Math.max(...items.map(({ x, r }) => x + r));\n  const top = Math.min(...items.map(({ y, r }) => y - r));\n  const bottom = Math.max(...items.map(({ y, r }) => y + r));\n  const width = right - left;\n  const height = bottom - top;\n  return {\n    x: left + width / 2,\n    y: top + height / 2,\n    s: Math.min(screenWidth / width, screenHeight / height),\n  };\n}\n","import * as d3 from \"d3\";\nimport { dbscan, layout } from \"./algorithms\";\n\nconst optimalFontSize = (word, r, fontFamily, fontWeight) => {\n  const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  text.textContent = word;\n  text.setAttributeNS(null, \"font-family\", fontFamily);\n  text.setAttributeNS(null, \"font-weight\", fontWeight);\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  svg.appendChild(text);\n  document.body.appendChild(svg);\n  let ok = 0;\n  let ng = 100;\n  for (let iter = 0; iter < 10; ++iter) {\n    let m = (ok + ng) / 2;\n    text.setAttributeNS(null, \"font-size\", m);\n    const { width, height } = text.getBBox();\n    const d = Math.sqrt(width ** 2 + height ** 2) / 2;\n    if (d <= r) {\n      ok = m;\n    } else {\n      ng = m;\n    }\n  }\n  document.body.removeChild(svg);\n  return ok;\n};\n\nconst getTime = (item) => {\n  const date = new Date(item.time);\n  return date.getTime();\n};\n\nfunction tweetPerHour(item) {\n  const start = new Date(item.time);\n  const stop = new Date(item.stopTime);\n  return (item.tweetCount * 3600000) / (stop - start);\n}\n\nexport async function loadData(url) {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  const timeColor = d3\n    .scaleSequential(d3.interpolateWarm)\n    .domain(d3.extent(data.dailyCount, getTime));\n  for (const row of data.dailyCount) {\n    row.color = timeColor(getTime(row));\n  }\n\n  const topicCircleSize = d3\n    .scaleSqrt()\n    .domain(d3.extent(data.topics, tweetPerHour))\n    .range([3, 15]);\n  for (const topic of data.topics) {\n    topic.tweetPerHour = tweetPerHour(topic);\n    topic.r = 0;\n    topic.r0 = topicCircleSize(topic.tweetPerHour);\n    topic.color = timeColor(getTime(topic));\n  }\n\n  const wordCircleSize = d3\n    .scaleSqrt()\n    .domain(d3.extent(data.words, (item) => item.count))\n    .range([10, 50]);\n  data.words.forEach((word, i) => {\n    word.x *= 10;\n    word.y *= 10;\n    word.r = wordCircleSize(word.count);\n    word.fontSize = optimalFontSize(word.word, word.r, \"700\");\n  });\n\n  const eps = 20;\n  const { clusters: wordClusters } = await dbscan(\n    data.words.map(({ x, y }) => [x, y]),\n    eps,\n    2,\n  );\n  wordClusters.forEach((cluster, i) => {\n    for (const wordId of cluster) {\n      data.words[wordId].cluster = i;\n    }\n  });\n\n  const pos = await layout(data.words, eps);\n  const wordColor = d3.scaleOrdinal(d3.schemePaired);\n  data.words.forEach((word, i) => {\n    const { x, y } = pos[i];\n    word.x = x;\n    word.y = y;\n    word.color =\n      word.cluster === undefined ? \"lightgray\" : wordColor(word.cluster);\n  });\n\n  data.wordClusters = wordClusters;\n  return data;\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  topics: [],\n  words: [],\n  dailyCount: [],\n  topicClusters: [],\n  wordClusters: [],\n  selectionRadius: 3,\n  selectedTopics: [],\n  selectedWords: [],\n  minWordCount: 1,\n  discoverTopic: false,\n};\nconst slice = createSlice({\n  name: \"app\",\n  initialState,\n  reducers: {\n    loadData(state, action) {\n      return Object.assign({}, initialState, action.payload);\n    },\n    updateSelectionRadius(state, action) {\n      return Object.assign({}, state, { selectionRadius: action.payload });\n    },\n    selectTopics(state, action) {\n      return Object.assign({}, state, { selectedTopics: action.payload });\n    },\n    updateMinWordCount(state, action) {\n      return Object.assign({}, state, { minWordCount: action.payload });\n    },\n    toggleDiscoverTopic(state) {\n      return Object.assign({}, state, { discoverTopic: !state.discoverTopic });\n    },\n    selectedWords(state, action) {\n      return Object.assign({}, state, { selectedWords: action.payload });\n    },\n    toggleWord(state, action) {\n      const word = action.payload;\n      const index = state.selectedWords.indexOf(word);\n      const selectedWords = Array.from(state.selectedWords);\n      if (index < 0) {\n        selectedWords.push(word);\n      } else {\n        selectedWords.splice(index, 1);\n      }\n      return Object.assign({}, state, { selectedWords });\n    },\n  },\n});\n\nexport default slice;\n","import { useEffect, useRef, useState } from \"react\";\n\nexport function Responsive({ render }) {\n  const wrapperRef = useRef();\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(wrapperRef.current.clientWidth);\n      setHeight(wrapperRef.current.clientHeight);\n    }\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }} ref={wrapperRef}>\n      {render(width, height)}\n    </div>\n  );\n}\n","export function HorizontalField({ label, children }) {\n  return (\n    <div className=\"field is-horizontal\">\n      <div className=\"field-label is-normal\">\n        <label className=\"label\">{label}</label>\n      </div>\n      <div className=\"field-body\">{children}</div>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport * as d3 from \"d3\";\nimport { dbscan, scale } from \"../services\";\nimport slice from \"../slice.js\";\nimport { Responsive } from \"./Responsive.js\";\nimport { HorizontalField } from \"./HorizontalField.js\";\n\nfunction ProjectionChart({ width, height }) {\n  const dispatch = useDispatch();\n  const topics = useSelector(({ topics }) => topics);\n  const selectionRadius = useSelector(({ selectionRadius }) => selectionRadius);\n  const selectedTopics = useSelector(\n    ({ selectedTopics }) => new Set(selectedTopics)\n  );\n\n  const margin = { left: 10, right: 10, top: 10, bottom: 10 };\n  const contentWidth = width - margin.left - margin.right;\n  const contentHeight = height - margin.top - margin.bottom;\n\n  const { x, y, s } = scale(topics, contentWidth, contentHeight);\n  function xScale(cx) {\n    return (cx - x) * s;\n  }\n  function yScale(cy) {\n    return (cy - y) * s;\n  }\n  const line = d3\n    .line()\n    .x((item) => xScale(item.x))\n    .y((item) => yScale(item.y));\n  const timeFormat = d3.timeFormat(\"%Y-%m-%d %H:%M\");\n\n  return (\n    <svg viewBox={`0 0 ${width} ${height}`}>\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n        <g transform={`translate(${contentWidth / 2},${contentHeight / 2})`}>\n          <g>\n            <path\n              fill=\"none\"\n              stroke=\"lightgray\"\n              strokeWidth=\"3\"\n              opacity=\"0.5\"\n              d={line(topics)}\n            />\n          </g>\n          <g>\n            {topics.map((item, i) => {\n              return (\n                <g\n                  key={i}\n                  className=\"is-clickable\"\n                  opacity={\n                    selectedTopics.size === 0 || selectedTopics.has(item.id)\n                      ? 1\n                      : 0.1\n                  }\n                  style={{\n                    transitionProperty: \"opacity\",\n                    transitionDuration: \"1s\",\n                    transitionTimingFunction: \"ease\",\n                  }}\n                  transform={`translate(${xScale(item.x)}, ${yScale(item.y)})`}\n                  onClick={async () => {\n                    if (selectedTopics.has(item.id)) {\n                      dispatch(slice.actions.selectTopics([]));\n                      return;\n                    }\n                    const { clusters } = await dbscan(\n                      topics.map(({ x, y }) => [x, y]),\n                      selectionRadius,\n                      1\n                    );\n                    for (const cluster of clusters) {\n                      for (const id of cluster) {\n                        if (id === item.id) {\n                          dispatch(slice.actions.selectTopics(cluster));\n                          return;\n                        }\n                      }\n                    }\n                  }}\n                >\n                  <circle r={item.r0} opacity=\"0.7\" fill={item.color}>\n                    <title>\n                      {timeFormat(new Date(item.time))}-\n                      {timeFormat(new Date(item.stopTime))}\n                    </title>\n                  </circle>\n                </g>\n              );\n            })}\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nexport function ProjectionView() {\n  const dispatch = useDispatch();\n  const selectionRadius = useSelector(({ selectionRadius }) => selectionRadius);\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n      <div className=\"p-3\">\n        <HorizontalField label=\"Selection Radius\">\n          <div className=\"field has-addons\">\n            <div className=\"control\">\n              <button\n                disabled={selectionRadius <= 0}\n                className=\"button\"\n                onClick={() => {\n                  dispatch(\n                    slice.actions.updateSelectionRadius(selectionRadius - 1)\n                  );\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-minus\" />\n                </span>\n              </button>\n            </div>\n            <div className=\"control is-expanded\">\n              <input\n                className=\"input\"\n                type=\"number\"\n                min=\"0\"\n                value={selectionRadius}\n                onChange={(event) => {\n                  dispatch(\n                    slice.actions.updateSelectionRadius(+event.target.value)\n                  );\n                }}\n              />\n            </div>\n            <div className=\"control\">\n              <button\n                className=\"button\"\n                onClick={() => {\n                  dispatch(\n                    slice.actions.updateSelectionRadius(selectionRadius + 1)\n                  );\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-plus\" />\n                </span>\n              </button>\n            </div>\n          </div>\n        </HorizontalField>\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"64px\",\n          right: 0,\n          bottom: 0,\n          left: 0,\n        }}\n      >\n        <Responsive\n          render={(width, height) => (\n            <ProjectionChart width={width} height={height} />\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport * as d3 from \"d3\";\nimport slice from \"../slice.js\";\nimport { Responsive } from \"./Responsive.js\";\n\nfunction TimelineChart({ width, height }) {\n  const dispatch = useDispatch();\n  const topics = useSelector(({ topics }) => topics);\n  const words = useSelector(({ words }) => words);\n  const dailyCount = useSelector(({ dailyCount }) => dailyCount);\n  const selectedTopics = useSelector(({ topics, selectedTopics }) =>\n    selectedTopics.map((id) => topics[id]),\n  );\n  const selectedWords = useSelector(\n    ({ selectedWords }) => new Set(selectedWords),\n  );\n  const minWordCount = useSelector(({ minWordCount }) => minWordCount);\n  const discoverTopic = useSelector(({ discoverTopic }) => discoverTopic);\n\n  const margin = {\n    top: 20,\n    right: 60,\n    bottom: 50,\n    left: 60,\n  };\n  const contentWidth = width - margin.left - margin.right;\n  const contentHeight = height - margin.top - margin.bottom;\n\n  const axisColor = \"#363636\";\n  const barWidth = contentWidth / dailyCount.length + 1;\n  const timeFormat = d3.timeFormat(\"%Y-%m-%d\");\n\n  const xScale = d3\n    .scaleTime()\n    .domain(d3.extent(dailyCount, (item) => new Date(item.time)))\n    .range([barWidth / 2, contentWidth - barWidth / 2]);\n  const barHeightScale = d3\n    .scaleLinear()\n    .domain([0, d3.max(dailyCount, (item) => item.tweetCount)])\n    .range([0, contentHeight])\n    .nice();\n  const lineYScale = d3\n    .scaleLinear()\n    .domain([\n      0,\n      d3.max(dailyCount, (item) => {\n        if (selectedWords.size === 0) {\n          return 100;\n        }\n        return d3.max(Array.from(selectedWords), (id) => item.words[id]);\n      }),\n    ])\n    .range([contentHeight, 0])\n    .nice();\n\n  return (\n    <svg width={width} height={height}>\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <g>\n          {dailyCount.map((item, i) => {\n            const t1 = new Date(item.time);\n            const t2 = new Date(t1.getTime() + 86400000);\n            const active =\n              selectedTopics.length === 0 ||\n              selectedTopics.some((topic) => {\n                const start = new Date(topic.time);\n                const stop = new Date(topic.stopTime);\n                return t1 <= stop && start <= t2;\n              });\n            return (\n              <g\n                key={item.time}\n                style={{\n                  transitionProperty: \"opacity\",\n                  transitionDuration: \"1s\",\n                  transitionTimingFunction: \"ease\",\n                }}\n                opacity={active ? 1 : 0.1}\n              >\n                <title>{timeFormat(t1)}</title>\n                <rect\n                  className=\"is-clickable\"\n                  x={xScale(new Date(item.time)) - barWidth / 2}\n                  y={contentHeight - barHeightScale(item.tweetCount)}\n                  width={barWidth}\n                  height={barHeightScale(item.tweetCount)}\n                  fill={item.color}\n                  onClick={() => {\n                    if (selectedTopics.length !== 0 && active) {\n                      dispatch(slice.actions.selectTopics([]));\n                    } else {\n                      dispatch(\n                        slice.actions.selectTopics(\n                          topics\n                            .filter((topic) => {\n                              const start = new Date(topic.time);\n                              const stop = new Date(topic.stopTime);\n                              return t1 <= stop && start <= t2;\n                            })\n                            .map(({ id }) => id),\n                        ),\n                      );\n                    }\n                  }}\n                />\n              </g>\n            );\n          })}\n        </g>\n        <g>\n          {words.map((word) => {\n            const line = d3.line().x((item) => xScale(new Date(item.time)));\n            if (selectedWords.has(word.id)) {\n              line.y((item) => lineYScale(item.words[word.id]));\n            } else {\n              line.y(() => lineYScale(0));\n            }\n            return (\n              <g\n                key={word.id}\n                className=\"is-clickable\"\n                onClick={() => {\n                  dispatch(slice.actions.toggleWord(word.id));\n\n                  if (discoverTopic) {\n                    const sWords = Array.from(selectedWords);\n                    const index = sWords.indexOf(word.id);\n                    if (index < 0) {\n                      sWords.push(word.id);\n                    } else {\n                      sWords.splice(index, 1);\n                    }\n\n                    if (sWords.size === 0) {\n                      dispatch(slice.actions.selectTopics([]));\n                    } else {\n                      dispatch(\n                        slice.actions.selectTopics(\n                          topics\n                            .filter((topic) => {\n                              const topicId = topic.id;\n                              var flag = 0;\n                              sWords.forEach(function (element) {\n                                if (\n                                  words[element].topicCount[topicId] <\n                                  minWordCount\n                                )\n                                  flag = 1;\n                              });\n                              return flag === 0;\n                            })\n                            .map(({ id }) => id),\n                        ),\n                      );\n                    }\n                  }\n                }}\n              >\n                <path\n                  style={{\n                    transitionPropery: \"d\",\n                    transitionDuration: \"1s\",\n                    transitionTimingFunction: \"ease\",\n                  }}\n                  d={line(dailyCount)}\n                  fill=\"none\"\n                  opacity=\"0.9\"\n                  stroke={selectedWords.has(word.id) ? word.color : \"none\"}\n                  strokeWidth=\"5\"\n                >\n                  <title>{word.word}</title>\n                </path>\n              </g>\n            );\n          })}\n        </g>\n        <g>\n          {words.map((word) => {\n            if (!selectedWords.has(word.id)) {\n              return null;\n            }\n            const maxIndex = dailyCount.reduce(\n              (x, item, i) =>\n                item.words[word.id] > dailyCount[x].words[word.id] ? i : x,\n              0,\n            );\n            const maxItem = dailyCount[maxIndex];\n            return (\n              <g\n                key={word.id}\n                className=\"is-clickable\"\n                onClick={() => {\n                  dispatch(slice.actions.toggleWord(word.id));\n\n                  const sWords = Array.from(selectedWords);\n                  const index = sWords.indexOf(word.id);\n                  if (index < 0) {\n                    sWords.push(word.id);\n                  } else {\n                    sWords.splice(index, 1);\n                  }\n\n                  if (sWords.size === 0) {\n                    dispatch(slice.actions.selectTopics([]));\n                  } else {\n                    dispatch(\n                      slice.actions.selectTopics(\n                        topics\n                          .filter((topic) => {\n                            const topicId = topic.id;\n                            var flag = 0;\n                            sWords.forEach(function (element) {\n                              if (\n                                words[element].topicCount[topicId] <\n                                minWordCount\n                              )\n                                flag = 1;\n                            });\n                            return flag === 0;\n                          })\n                          .map(({ id }) => id),\n                      ),\n                    );\n                  }\n                }}\n              >\n                <text\n                  x={xScale(new Date(maxItem.time))}\n                  y={lineYScale(maxItem.words[word.id])}\n                  textAnchor=\"middle\"\n                  dominantBaseline=\"text-after-edge\"\n                  fontWeight=\"700\"\n                  fontSize=\"12\"\n                  fill={axisColor}\n                >\n                  {word.word}\n                </text>\n              </g>\n            );\n          })}\n        </g>\n        <g transform={`translate(0,${contentHeight})`}>\n          <line x1=\"0\" y1=\"0\" x2={contentWidth} y2=\"0\" stroke={axisColor} />\n          <g>\n            {xScale.ticks().map((x, i) => {\n              return (\n                <g key={i} transform={`translate(${xScale(x)},0)`}>\n                  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"5\" stroke={axisColor} />\n                  <g transform=\"rotate(-30)\">\n                    <text\n                      x=\"-5\"\n                      textAnchor=\"end\"\n                      dominantBaseline=\"text-before-edge\"\n                      fontWeight=\"700\"\n                      fontSize=\"10\"\n                      fill={axisColor}\n                    >\n                      {timeFormat(x)}\n                    </text>\n                  </g>\n                </g>\n              );\n            })}\n          </g>\n        </g>\n        <g>\n          <text\n            transform={`translate(-50,${contentHeight / 2})rotate(-90)`}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            fontWeight=\"700\"\n            fontSize=\"16\"\n            fill={axisColor}\n          >\n            Tweet Count\n          </text>\n          <line x1=\"0\" y1={contentHeight} x2=\"0\" y2=\"0\" stroke={axisColor} />\n          <g>\n            {barHeightScale.ticks().map((y, i) => {\n              return (\n                <g\n                  key={i}\n                  transform={`translate(0,${\n                    contentHeight - barHeightScale(y)\n                  })`}\n                >\n                  <line x1=\"0\" y1=\"0\" x2=\"-5\" y2=\"0\" stroke={axisColor} />\n                  <text\n                    x=\"-7\"\n                    textAnchor=\"end\"\n                    dominantBaseline=\"central\"\n                    fontWeight=\"700\"\n                    fontSize=\"12\"\n                    fill={axisColor}\n                  >\n                    {y}\n                  </text>\n                </g>\n              );\n            })}\n          </g>\n        </g>\n        <g transform={`translate(${contentWidth},0)`}>\n          <text\n            transform={`translate(40,${contentHeight / 2})rotate(-90)`}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            fontWeight=\"700\"\n            fontSize=\"16\"\n            fill={axisColor}\n          >\n            Word Occurrence\n          </text>\n          <line x1=\"0\" y1={contentHeight} x2=\"0\" y2=\"0\" stroke={axisColor} />\n          <g>\n            {lineYScale.ticks().map((y, i) => {\n              return (\n                <g key={i} transform={`translate(0,${lineYScale(y)})`}>\n                  <line x1=\"0\" y1=\"0\" x2=\"5\" y2=\"0\" stroke={axisColor} />\n                  <text\n                    x=\"7\"\n                    textAnchor=\"start\"\n                    dominantBaseline=\"central\"\n                    fontWeight=\"700\"\n                    fontSize=\"12\"\n                    fill={axisColor}\n                  >\n                    {y}\n                  </text>\n                </g>\n              );\n            })}\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nexport function TimelineView() {\n  return (\n    <Responsive\n      render={(width, height) => (\n        <TimelineChart width={width} height={height} />\n      )}\n    />\n  );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { scale } from \"../services\";\nimport slice from \"../slice\";\nimport { Responsive } from \"./Responsive.js\";\nimport { HorizontalField } from \"./HorizontalField.js\";\n\nfunction WordBubbleChart({ width, height }) {\n  const dispatch = useDispatch();\n  const topics = useSelector(({ topics }) => topics);\n  const words = useSelector(({ words }) => words);\n  const selectedTopics = useSelector(({ selectedTopics }) => selectedTopics);\n  const selectedWords = useSelector(\n    ({ selectedWords }) => new Set(selectedWords),\n  );\n  const minWordCount = useSelector(({ minWordCount }) => minWordCount);\n  const discoverTopic = useSelector(({ discoverTopic }) => discoverTopic);\n\n  const margin = {\n    left: 10,\n    right: 10,\n    top: 10,\n    bottom: 10,\n  };\n  const contentWidth = width - margin.left - margin.right;\n  const contentHeight = height - margin.top - margin.bottom;\n  const { x, y, s } = scale(words, contentWidth, contentHeight);\n\n  return (\n    <svg viewBox={`0 0 ${width} ${height}`}>\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n        <g transform={`translate(${contentWidth / 2},${contentHeight / 2})`}>\n          <g transform={`scale(${s})`}>\n            <g transform={`translate(${-x},${-y})`}>\n              {words.map((word) => {\n                const wordCount =\n                  selectedTopics.length === 0\n                    ? word.count\n                    : selectedTopics.reduce(\n                        (s, id) => s + word.topicCount[id],\n                        0,\n                      );\n                const globalOpacity = wordCount < minWordCount ? 0 : 1;\n                const localOpacity = Math.sqrt(wordCount / word.count);\n                return (\n                  <g\n                    key={word.id}\n                    className=\"is-clickable\"\n                    opacity={globalOpacity}\n                    style={{\n                      transitionProperty: \"opacity\",\n                      transitionDuration: \"1s\",\n                      transitionTimingFunction: \"ease\",\n                    }}\n                    transform={`translate(${word.x}, ${word.y})`}\n                    onClick={() => {\n                      dispatch(slice.actions.toggleWord(word.id));\n\n                      if (discoverTopic) {\n                        const sWords = Array.from(selectedWords);\n                        const index = sWords.indexOf(word.id);\n                        if (index < 0) {\n                          sWords.push(word.id);\n                        } else {\n                          sWords.splice(index, 1);\n                        }\n\n                        if (sWords.size === 0) {\n                          dispatch(slice.actions.selectTopics([]));\n                        } else {\n                          dispatch(\n                            slice.actions.selectTopics(\n                              topics\n                                .filter((topic) => {\n                                  const topicId = topic.id;\n                                  var flag = 0;\n                                  sWords.forEach(function (element) {\n                                    if (\n                                      words[element].topicCount[topicId] <\n                                      minWordCount\n                                    )\n                                      flag = 1;\n                                  });\n                                  return flag === 0;\n                                })\n                                .map(({ id }) => id),\n                            ),\n                          );\n                        }\n                      }\n                    }}\n                  >\n                    <title>{`${word.word}`}</title>\n                    <circle\n                      r={word.r}\n                      opacity={localOpacity}\n                      style={{\n                        transitionProperty: \"opacity\",\n                        transitionDuration: \"1s\",\n                        transitionTimingFunction: \"ease\",\n                      }}\n                      fill={word.color}\n                    />\n                    <circle\n                      r={word.r}\n                      fill=\"none\"\n                      stroke={selectedWords.has(word.id) ? \"#363636\" : \"none\"}\n                      strokeWidth=\"2\"\n                    />\n                    <text\n                      className=\"is-unselectable\"\n                      fontSize={word.fontSize}\n                      textAnchor=\"middle\"\n                      dominantBaseline=\"central\"\n                      fontWeight=\"700\"\n                      fill=\"#363636\"\n                    >\n                      {word.word}\n                    </text>\n                  </g>\n                );\n              })}\n            </g>\n          </g>\n        </g>\n      </g>\n    </svg>\n  );\n}\n\nexport function WordBubbleView({ words, selectedTopics }) {\n  const dispatch = useDispatch();\n  const minWordCount = useSelector(({ minWordCount }) => minWordCount);\n  const discoverTopic = useSelector(({ discoverTopic }) => discoverTopic);\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n      <div className=\"p-3\">\n        <HorizontalField label=\"Min Word Count\">\n          <div className=\"field has-addons\">\n            <div className=\"control\">\n              <button\n                disabled={minWordCount <= 0}\n                className=\"button\"\n                onClick={() => {\n                  dispatch(slice.actions.updateMinWordCount(minWordCount - 1));\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-minus\" />\n                </span>\n              </button>\n            </div>\n            <div className=\"control is-expanded\">\n              <input\n                className=\"input\"\n                type=\"number\"\n                min=\"1\"\n                value={minWordCount}\n                onChange={(event) => {\n                  dispatch(\n                    slice.actions.updateMinWordCount(+event.target.value),\n                  );\n                }}\n              />\n            </div>\n            <div className=\"control\">\n              <button\n                className=\"button\"\n                onClick={() => {\n                  dispatch(slice.actions.updateMinWordCount(minWordCount + 1));\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"fas fa-plus\" />\n                </span>\n              </button>\n            </div>\n          </div>\n        </HorizontalField>\n        <HorizontalField>\n          <div className=\"field \">\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  checked={discoverTopic}\n                  onChange={() => {\n                    dispatch(slice.actions.toggleDiscoverTopic());\n                    dispatch(slice.actions.selectTopics([]));\n                    dispatch(slice.actions.selectedWords([]));\n                  }}\n                />{\" \"}\n                Find related topics from selected keyphrases\n              </label>\n            </div>\n          </div>\n        </HorizontalField>\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"128px\",\n          right: 0,\n          bottom: 0,\n          left: 0,\n        }}\n      >\n        <Responsive\n          render={(width, height) => (\n            <WordBubbleChart\n              words={words}\n              selectedTopics={selectedTopics}\n              width={width}\n              height={height}\n            />\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ProjectionView, TimelineView, WordBubbleView } from \"./components\";\nimport slice from \"./slice.js\";\nimport { loadData } from \"./services\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    (async () => {\n      const data = await loadData(\"data-covid19.json\");\n      dispatch(slice.actions.loadData(data));\n    })();\n  }, [dispatch]);\n\n  return (\n    <>\n      <nav\n        className=\"navbar is-info\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\".\">\n            <h1>Visualization of Twitter Topic Transitions</h1>\n          </a>\n        </div>\n        <div className=\"navbar-menu\">\n          <div className=\"navbar-start\">\n            <a\n              className=\"navbar-item\"\n              href=\".\"\n              onClick={(event) => {\n                event.preventDefault();\n                alert(\n                  `Demo application for viaulization of twitter topic transitions.\nRecommended display resolution: Over Full HD\nDeveloped by: https://vdslab.jp`\n                );\n              }}\n            >\n              About\n            </a>\n            <div className=\"navbar-item\">\n              <div className=\"field\">\n                <div className=\"control\">\n                  <div className=\"select\">\n                    <select\n                      defaultValue=\"data-covid19.json\"\n                      onChange={async (event) => {\n                        const data = await loadData(event.target.value);\n                        dispatch(slice.actions.loadData(data));\n                      }}\n                    >\n                      <option value=\"data-fukushima.json\">\n                        2011 Fukushima Dataset\n                      </option>\n                      <option value=\"data-covid19.json\">\n                        2020 Covid19 Dataset\n                      </option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"navbar-end\">\n            <div className=\"navbar-item\">\n              <div className=\"buttons\">\n                <button\n                  className=\"button\"\n                  onClick={() => {\n                    dispatch(slice.actions.selectTopics([]));\n                    dispatch(slice.actions.selectedWords([]));\n                  }}\n                >\n                  Clear Selection\n                </button>\n                <button\n                  className=\"button\"\n                  onClick={() => {\n                    document.querySelector(\"#content\").requestFullscreen();\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"fas fa-expand\" />\n                  </span>\n                </button>\n                <button\n                  className=\"button\"\n                  onClick={() => {\n                    alert(\"TBD\");\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"fas fa-cogs\" />\n                  </span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <main className=\"main has-background-info-light\">\n        <div className=\"main-contents\">\n          <div className=\"timeline-view p-3\">\n            <div className=\"box is-paddingless is-radiusless\">\n              <TimelineView />\n            </div>\n          </div>\n          <div className=\"projection-view p-3\">\n            <div className=\"box is-paddingless is-radiusless\">\n              <ProjectionView />\n            </div>\n          </div>\n          <div className=\"word-bubble-view p-3\">\n            <div className=\"box is-paddingless is-radiusless\">\n              <WordBubbleView />\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import \"bulma/css/bulma.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"./styles.css\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport App from \"./App.js\";\nimport slice from \"./slice.js\";\n\nconst store = configureStore({\n  reducer: slice.reducer,\n  middleware(getDefaultMiddleware) {\n    return getDefaultMiddleware({\n      immutableCheck: false,\n      serializableCheck: false,\n    });\n  },\n});\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#content\")\n);\n","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"dbscan\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"0122b5b0cedbbdb80a18.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"layout\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"b518c8092a4e2e3e1009.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"tsne\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"9398b91f8e7660e9636f.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}