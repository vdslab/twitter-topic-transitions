{"version":3,"sources":["../webpack/bootstrap","../node_modules/density-clustering/lib/PriorityQueue.js","../node_modules/density-clustering/lib/index.js","workers/dbscan.worker.js","../node_modules/density-clustering/lib/DBSCAN.js","../node_modules/density-clustering/lib/KMEANS.js","../node_modules/density-clustering/lib/OPTICS.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PriorityQueue","elements","priorities","sorting","this","_queue","_priorities","_sorting","_init","insert","ele","priority","indexToInsert","length","index","priority2","_insertAt","remove","splice","forEach","func","getElements","getElementPriority","getPriorities","getElementsWithPriorities","result","push","Error","DBSCAN","require","KMEANS","OPTICS","async","dbscan","data","eps","minSamples","clusters","run","noise","addEventListener","e","f","_e$data","type","method","id","params","__webpack_exports__","Promise","resolve","then","apply","reject","postMessage","catch","error","message","stack","dataset","epsilon","minPts","distanceFunction","distance","_euclideanDistance","_visited","_assigned","_datasetLength","pointId","neighbors","_regionQuery","clusterId","_addToCluster","_expandCluster","Array","pointId2","neighbors2","_mergeArrays","a","b","len","P","indexOf","q","sum","Math","min","sqrt","k","assignments","centroids","init","randomCentroid","change","assign","centroidId","mean","maxDim","count","dim","j","getClusters","centroid","maxId","round","random","closestCentroid","argmin","point","set","Number","MAX_VALUE","arg","diff","_reachability","_processed","_coreDistance","_orderedList","priorityQueue","undefined","_distanceToCore","_updateQueue","getReachabilityPlot","reachabilityPlot","queue","self","dist","newReachableDistance","max","queueElements","coreDistCand"],"mappings":"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","file":"0122b5b0cedbbdb80a18.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/twitter-topic-transitions/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\r\n * PriorityQueue\r\n * Elements in this queue are sorted according to their value\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\n\r\n/**\r\n * PriorityQueue class construcotr\r\n * @constructor\r\n *\r\n * @example\r\n * queue: [1,2,3,4]\r\n * priorities: [4,1,2,3]\r\n * > result = [1,4,2,3]\r\n *\r\n * @param {Array} elements\r\n * @param {Array} priorities\r\n * @param {string} sorting - asc / desc\r\n * @returns {PriorityQueue}\r\n */\r\nfunction PriorityQueue(elements, priorities, sorting) {\r\n  /** @type {Array} */\r\n  this._queue = [];\r\n  /** @type {Array} */\r\n  this._priorities = [];\r\n  /** @type {string} */\r\n  this._sorting = 'desc';\r\n\r\n  this._init(elements, priorities, sorting);\r\n};\r\n\r\n/**\r\n * Insert element\r\n *\r\n * @param {Object} ele\r\n * @param {Object} priority\r\n * @returns {undefined}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.insert = function(ele, priority) {\r\n  var indexToInsert = this._queue.length;\r\n  var index = indexToInsert;\r\n\r\n  while (index--) {\r\n    var priority2 = this._priorities[index];\r\n    if (this._sorting === 'desc') {\r\n      if (priority > priority2) {\r\n        indexToInsert = index;\r\n      }\r\n    } else {\r\n      if (priority < priority2) {\r\n        indexToInsert = index;\r\n      }\r\n    }\r\n  }\r\n\r\n  this._insertAt(ele, priority, indexToInsert);\r\n};\r\n\r\n/**\r\n * Remove element\r\n *\r\n * @param {Object} ele\r\n * @returns {undefined}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.remove = function(ele) {\r\n  var index = this._queue.length;\r\n\r\n  while (index--) {\r\n    var ele2 = this._queue[index];\r\n    if (ele === ele2) {\r\n      this._queue.splice(index, 1);\r\n      this._priorities.splice(index, 1);\r\n      break;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * For each loop wrapper\r\n *\r\n * @param {function} func\r\n * @returs {undefined}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.forEach = function(func) {\r\n  this._queue.forEach(func);\r\n};\r\n\r\n/**\r\n * @returns {Array}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.getElements = function() {\r\n  return this._queue;\r\n};\r\n\r\n/**\r\n * @param {number} index\r\n * @returns {Object}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.getElementPriority = function(index) {\r\n  return this._priorities[index];\r\n};\r\n\r\n/**\r\n * @returns {Array}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.getPriorities = function() {\r\n  return this._priorities;\r\n};\r\n\r\n/**\r\n * @returns {Array}\r\n * @access public\r\n */\r\nPriorityQueue.prototype.getElementsWithPriorities = function() {\r\n  var result = [];\r\n\r\n  for (var i = 0, l = this._queue.length; i < l; i++) {\r\n    result.push([this._queue[i], this._priorities[i]]);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Set object properties\r\n *\r\n * @param {Array} elements\r\n * @param {Array} priorities\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nPriorityQueue.prototype._init = function(elements, priorities, sorting) {\r\n\r\n  if (elements && priorities) {\r\n    this._queue = [];\r\n    this._priorities = [];\r\n\r\n    if (elements.length !== priorities.length) {\r\n      throw new Error('Arrays must have the same length');\r\n    }\r\n\r\n    for (var i = 0; i < elements.length; i++) {\r\n      this.insert(elements[i], priorities[i]);\r\n    }\r\n  }\r\n\r\n  if (sorting) {\r\n    this._sorting = sorting;\r\n  }\r\n};\r\n\r\n/**\r\n * Insert element at given position\r\n *\r\n * @param {Object} ele\r\n * @param {number} index\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nPriorityQueue.prototype._insertAt = function(ele, priority, index) {\r\n  if (this._queue.length === index) {\r\n    this._queue.push(ele);\r\n    this._priorities.push(priority);\r\n  } else {\r\n    this._queue.splice(index, 0, ele);\r\n    this._priorities.splice(index, 0, priority);\r\n  }\r\n};\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = PriorityQueue;\r\n}\r\n","\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = {\r\n      DBSCAN: require('./DBSCAN.js'),\r\n      KMEANS: require('./KMEANS.js'),\r\n      OPTICS: require('./OPTICS.js'),\r\n      PriorityQueue: require('./PriorityQueue.js')\r\n    };\r\n}\r\n","import { DBSCAN } from \"density-clustering\";\n\nexport async function dbscan(data, eps, minSamples) {\n  const dbscan = new DBSCAN();\n  const clusters = dbscan.run(data, eps, minSamples);\n  return { clusters, noise: dbscan.noise };\n}\n\naddEventListener('message', function (e) {var _e$data = e.data,type = _e$data.type,method = _e$data.method,id = _e$data.id,params = _e$data.params,f,p;if (type === 'RPC' && method) {if (f = __webpack_exports__[method]) {p = Promise.resolve().then(function () {return f.apply(__webpack_exports__, params);});} else {p = Promise.reject('No such method');}p.then(function (result) {postMessage({type: 'RPC',id: id,result: result});}).catch(function (e) {var error = {message: e};if (e.stack) {error.message = e.message;error.stack = e.stack;error.name = e.name;}postMessage({type: 'RPC',id: id,error: error});});}});postMessage({type: 'RPC',method: 'ready'});","/**\r\n * DBSCAN - Density based clustering\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\n\r\n/**\r\n * DBSCAN class construcotr\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {DBSCAN}\r\n */\r\nfunction DBSCAN(dataset, epsilon, minPts, distanceFunction) {\r\n  /** @type {Array} */\r\n  this.dataset = [];\r\n  /** @type {number} */\r\n  this.epsilon = 1;\r\n  /** @type {number} */\r\n  this.minPts = 2;\r\n  /** @type {function} */\r\n  this.distance = this._euclideanDistance;\r\n  /** @type {Array} */\r\n  this.clusters = [];\r\n  /** @type {Array} */\r\n  this.noise = [];\r\n\r\n  // temporary variables used during computation\r\n\r\n  /** @type {Array} */\r\n  this._visited = [];\r\n  /** @type {Array} */\r\n  this._assigned = [];\r\n  /** @type {number} */\r\n  this._datasetLength = 0;\r\n\r\n  this._init(dataset, epsilon, minPts, distanceFunction);\r\n};\r\n\r\n/******************************************************************************/\r\n// public functions\r\n\r\n/**\r\n * Start clustering\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {undefined}\r\n * @access public\r\n */\r\nDBSCAN.prototype.run = function(dataset, epsilon, minPts, distanceFunction) {\r\n  this._init(dataset, epsilon, minPts, distanceFunction);\r\n\r\n  for (var pointId = 0; pointId < this._datasetLength; pointId++) {\r\n    // if point is not visited, check if it forms a cluster\r\n    if (this._visited[pointId] !== 1) {\r\n      this._visited[pointId] = 1;\r\n\r\n      // if closest neighborhood is too small to form a cluster, mark as noise\r\n      var neighbors = this._regionQuery(pointId);\r\n\r\n      if (neighbors.length < this.minPts) {\r\n        this.noise.push(pointId);\r\n      } else {\r\n        // create new cluster and add point\r\n        var clusterId = this.clusters.length;\r\n        this.clusters.push([]);\r\n        this._addToCluster(pointId, clusterId);\r\n\r\n        this._expandCluster(clusterId, neighbors);\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.clusters;\r\n};\r\n\r\n/******************************************************************************/\r\n// protected functions\r\n\r\n/**\r\n * Set object properties\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distance\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._init = function(dataset, epsilon, minPts, distance) {\r\n\r\n  if (dataset) {\r\n\r\n    if (!(dataset instanceof Array)) {\r\n      throw Error('Dataset must be of type array, ' +\r\n        typeof dataset + ' given');\r\n    }\r\n\r\n    this.dataset = dataset;\r\n    this.clusters = [];\r\n    this.noise = [];\r\n\r\n    this._datasetLength = dataset.length;\r\n    this._visited = new Array(this._datasetLength);\r\n    this._assigned = new Array(this._datasetLength);\r\n  }\r\n\r\n  if (epsilon) {\r\n    this.epsilon = epsilon;\r\n  }\r\n\r\n  if (minPts) {\r\n    this.minPts = minPts;\r\n  }\r\n\r\n  if (distance) {\r\n    this.distance = distance;\r\n  }\r\n};\r\n\r\n/**\r\n * Expand cluster to closest points of given neighborhood\r\n *\r\n * @param {number} clusterId\r\n * @param {Array} neighbors\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._expandCluster = function(clusterId, neighbors) {\r\n\r\n  /**\r\n   * It's very important to calculate length of neighbors array each time,\r\n   * as the number of elements changes over time\r\n   */\r\n  for (var i = 0; i < neighbors.length; i++) {\r\n    var pointId2 = neighbors[i];\r\n\r\n    if (this._visited[pointId2] !== 1) {\r\n      this._visited[pointId2] = 1;\r\n      var neighbors2 = this._regionQuery(pointId2);\r\n\r\n      if (neighbors2.length >= this.minPts) {\r\n        neighbors = this._mergeArrays(neighbors, neighbors2);\r\n      }\r\n    }\r\n\r\n    // add to cluster\r\n    if (this._assigned[pointId2] !== 1) {\r\n      this._addToCluster(pointId2, clusterId);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Add new point to cluster\r\n *\r\n * @param {number} pointId\r\n * @param {number} clusterId\r\n */\r\nDBSCAN.prototype._addToCluster = function(pointId, clusterId) {\r\n  this.clusters[clusterId].push(pointId);\r\n  this._assigned[pointId] = 1;\r\n};\r\n\r\n/**\r\n * Find all neighbors around given point\r\n *\r\n * @param {number} pointId,\r\n * @param {number} epsilon\r\n * @returns {Array}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._regionQuery = function(pointId) {\r\n  var neighbors = [];\r\n\r\n  for (var id = 0; id < this._datasetLength; id++) {\r\n    var dist = this.distance(this.dataset[pointId], this.dataset[id]);\r\n    if (dist < this.epsilon) {\r\n      neighbors.push(id);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n};\r\n\r\n/******************************************************************************/\r\n// helpers\r\n\r\n/**\r\n * @param {Array} a\r\n * @param {Array} b\r\n * @returns {Array}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._mergeArrays = function(a, b) {\r\n  var len = b.length;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    var P = b[i];\r\n    if (a.indexOf(P) < 0) {\r\n      a.push(P);\r\n    }\r\n  }\r\n\r\n  return a;\r\n};\r\n\r\n/**\r\n * Calculate euclidean distance in multidimensional space\r\n *\r\n * @param {Array} p\r\n * @param {Array} q\r\n * @returns {number}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._euclideanDistance = function(p, q) {\r\n  var sum = 0;\r\n  var i = Math.min(p.length, q.length);\r\n\r\n  while (i--) {\r\n    sum += (p[i] - q[i]) * (p[i] - q[i]);\r\n  }\r\n\r\n  return Math.sqrt(sum);\r\n};\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = DBSCAN;\r\n}\r\n","/**\r\n * KMEANS clustering\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\n\r\n/**\r\n * KMEANS class constructor\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} k - number of clusters\r\n * @param {function} distance - distance function\r\n * @returns {KMEANS}\r\n */\r\n function KMEANS(dataset, k, distance) {\r\n  this.k = 3; // number of clusters\r\n  this.dataset = []; // set of feature vectors\r\n  this.assignments = []; // set of associated clusters for each feature vector\r\n  this.centroids = []; // vectors for our clusters\r\n\r\n  this.init(dataset, k, distance);\r\n}\r\n\r\n/**\r\n * @returns {undefined}\r\n */\r\nKMEANS.prototype.init = function(dataset, k, distance) {\r\n  this.assignments = [];\r\n  this.centroids = [];\r\n\r\n  if (typeof dataset !== 'undefined') {\r\n    this.dataset = dataset;\r\n  }\r\n\r\n  if (typeof k !== 'undefined') {\r\n    this.k = k;\r\n  }\r\n\r\n  if (typeof distance !== 'undefined') {\r\n    this.distance = distance;\r\n  }\r\n};\r\n\r\n/**\r\n * @returns {undefined}\r\n */\r\nKMEANS.prototype.run = function(dataset, k) {\r\n  this.init(dataset, k);\r\n\r\n  var len = this.dataset.length;\r\n\r\n  // initialize centroids\r\n  for (var i = 0; i < this.k; i++) {\r\n    this.centroids[i] = this.randomCentroid();\r\n\t}\r\n\r\n  var change = true;\r\n  while(change) {\r\n\r\n    // assign feature vectors to clusters\r\n    change = this.assign();\r\n\r\n    // adjust location of centroids\r\n    for (var centroidId = 0; centroidId < this.k; centroidId++) {\r\n      var mean = new Array(maxDim);\r\n      var count = 0;\r\n\r\n      // init mean vector\r\n      for (var dim = 0; dim < maxDim; dim++) {\r\n        mean[dim] = 0;\r\n      }\r\n\r\n      for (var j = 0; j < len; j++) {\r\n        var maxDim = this.dataset[j].length;\r\n\r\n        // if current cluster id is assigned to point\r\n        if (centroidId === this.assignments[j]) {\r\n          for (var dim = 0; dim < maxDim; dim++) {\r\n            mean[dim] += this.dataset[j][dim];\r\n          }\r\n          count++;\r\n        }\r\n      }\r\n\r\n      if (count > 0) {\r\n        // if cluster contain points, adjust centroid position\r\n        for (var dim = 0; dim < maxDim; dim++) {\r\n          mean[dim] /= count;\r\n        }\r\n        this.centroids[centroidId] = mean;\r\n      } else {\r\n        // if cluster is empty, generate new random centroid\r\n        this.centroids[centroidId] = this.randomCentroid();\r\n        change = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.getClusters();\r\n};\r\n\r\n/**\r\n * Generate random centroid\r\n *\r\n * @returns {Array}\r\n */\r\nKMEANS.prototype.randomCentroid = function() {\r\n  var maxId = this.dataset.length -1;\r\n  var centroid;\r\n  var id;\r\n\r\n  do {\r\n    id = Math.round(Math.random() * maxId);\r\n    centroid = this.dataset[id];\r\n  } while (this.centroids.indexOf(centroid) >= 0);\r\n\r\n  return centroid;\r\n}\r\n\r\n/**\r\n * Assign points to clusters\r\n *\r\n * @returns {boolean}\r\n */\r\nKMEANS.prototype.assign = function() {\r\n  var change = false;\r\n  var len = this.dataset.length;\r\n  var closestCentroid;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    closestCentroid = this.argmin(this.dataset[i], this.centroids, this.distance);\r\n\r\n    if (closestCentroid != this.assignments[i]) {\r\n      this.assignments[i] = closestCentroid;\r\n      change = true;\r\n    }\r\n  }\r\n\r\n  return change;\r\n}\r\n\r\n/**\r\n * Extract information about clusters\r\n *\r\n * @returns {undefined}\r\n */\r\nKMEANS.prototype.getClusters = function() {\r\n  var clusters = new Array(this.k);\r\n  var centroidId;\r\n\r\n  for (var pointId = 0; pointId < this.assignments.length; pointId++) {\r\n    centroidId = this.assignments[pointId];\r\n\r\n    // init empty cluster\r\n    if (typeof clusters[centroidId] === 'undefined') {\r\n      clusters[centroidId] = [];\r\n    }\r\n\r\n    clusters[centroidId].push(pointId);\r\n  }\r\n\r\n  return clusters;\r\n};\r\n\r\n// utils\r\n\r\n/**\r\n * @params {Array} point\r\n * @params {Array.<Array>} set\r\n * @params {Function} f\r\n * @returns {number}\r\n */\r\nKMEANS.prototype.argmin = function(point, set, f) {\r\n  var min = Number.MAX_VALUE;\r\n  var arg = 0;\r\n  var len = set.length;\r\n  var d;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    d = f(point, set[i]);\r\n    if (d < min) {\r\n      min = d;\r\n      arg = i;\r\n    }\r\n  }\r\n\r\n  return arg;\r\n};\r\n\r\n/**\r\n * Euclidean distance\r\n *\r\n * @params {number} p\r\n * @params {number} q\r\n * @returns {number}\r\n */\r\nKMEANS.prototype.distance = function(p, q) {\r\n  var sum = 0;\r\n  var i = Math.min(p.length, q.length);\r\n\r\n  while (i--) {\r\n    var diff = p[i] - q[i];\r\n    sum += diff * diff;\r\n  }\r\n\r\n  return Math.sqrt(sum);\r\n};\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = KMEANS;\r\n}\r\n","\r\n/**\r\n * @requires ./PriorityQueue.js\r\n */\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n      var PriorityQueue = require('./PriorityQueue.js');\r\n}\r\n\r\n/**\r\n * OPTICS - Ordering points to identify the clustering structure\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\n\r\n/**\r\n * OPTICS class constructor\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {OPTICS}\r\n */\r\nfunction OPTICS(dataset, epsilon, minPts, distanceFunction) {\r\n  /** @type {number} */\r\n  this.epsilon = 1;\r\n  /** @type {number} */\r\n  this.minPts = 1;\r\n  /** @type {function} */\r\n  this.distance = this._euclideanDistance;\r\n\r\n  // temporary variables used during computation\r\n\r\n  /** @type {Array} */\r\n  this._reachability = [];\r\n  /** @type {Array} */\r\n  this._processed = [];\r\n  /** @type {number} */\r\n  this._coreDistance = 0;\r\n  /** @type {Array} */\r\n  this._orderedList = [];\r\n\r\n  this._init(dataset, epsilon, minPts, distanceFunction);\r\n}\r\n\r\n/******************************************************************************/\r\n// pulic functions\r\n\r\n/**\r\n * Start clustering\r\n *\r\n * @param {Array} dataset\r\n * @returns {undefined}\r\n * @access public\r\n */\r\nOPTICS.prototype.run = function(dataset, epsilon, minPts, distanceFunction) {\r\n  this._init(dataset, epsilon, minPts, distanceFunction);\r\n\r\n  for (var pointId = 0, l = this.dataset.length; pointId < l; pointId++) {\r\n    if (this._processed[pointId] !== 1) {\r\n      this._processed[pointId] = 1;\r\n      this.clusters.push([pointId]);\r\n      var clusterId = this.clusters.length - 1;\r\n\r\n      this._orderedList.push(pointId);\r\n      var priorityQueue = new PriorityQueue(null, null, 'asc');\r\n      var neighbors = this._regionQuery(pointId);\r\n\r\n      // using priority queue assign elements to new cluster\r\n      if (this._distanceToCore(pointId) !== undefined) {\r\n        this._updateQueue(pointId, neighbors, priorityQueue);\r\n        this._expandCluster(clusterId, priorityQueue);\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.clusters;\r\n};\r\n\r\n/**\r\n * Generate reachability plot for all points\r\n *\r\n * @returns {array}\r\n * @access public\r\n */\r\nOPTICS.prototype.getReachabilityPlot = function() {\r\n  var reachabilityPlot = [];\r\n\r\n  for (var i = 0, l = this._orderedList.length; i < l; i++) {\r\n    var pointId = this._orderedList[i];\r\n    var distance = this._reachability[pointId];\r\n\r\n    reachabilityPlot.push([pointId, distance]);\r\n  }\r\n\r\n  return reachabilityPlot;\r\n};\r\n\r\n/******************************************************************************/\r\n// protected functions\r\n\r\n/**\r\n * Set object properties\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distance\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nOPTICS.prototype._init = function(dataset, epsilon, minPts, distance) {\r\n\r\n  if (dataset) {\r\n\r\n    if (!(dataset instanceof Array)) {\r\n      throw Error('Dataset must be of type array, ' +\r\n        typeof dataset + ' given');\r\n    }\r\n\r\n    this.dataset = dataset;\r\n    this.clusters = [];\r\n    this._reachability = new Array(this.dataset.length);\r\n    this._processed = new Array(this.dataset.length);\r\n    this._coreDistance = 0;\r\n    this._orderedList = [];\r\n  }\r\n\r\n  if (epsilon) {\r\n    this.epsilon = epsilon;\r\n  }\r\n\r\n  if (minPts) {\r\n    this.minPts = minPts;\r\n  }\r\n\r\n  if (distance) {\r\n    this.distance = distance;\r\n  }\r\n};\r\n\r\n/**\r\n * Update information in queue\r\n *\r\n * @param {number} pointId\r\n * @param {Array} neighbors\r\n * @param {PriorityQueue} queue\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nOPTICS.prototype._updateQueue = function(pointId, neighbors, queue) {\r\n  var self = this;\r\n\r\n  this._coreDistance = this._distanceToCore(pointId);\r\n  neighbors.forEach(function(pointId2) {\r\n    if (self._processed[pointId2] === undefined) {\r\n      var dist = self.distance(self.dataset[pointId], self.dataset[pointId2]);\r\n      var newReachableDistance = Math.max(self._coreDistance, dist);\r\n\r\n      if (self._reachability[pointId2] === undefined) {\r\n        self._reachability[pointId2] = newReachableDistance;\r\n        queue.insert(pointId2, newReachableDistance);\r\n      } else {\r\n        if (newReachableDistance < self._reachability[pointId2]) {\r\n          self._reachability[pointId2] = newReachableDistance;\r\n          queue.remove(pointId2);\r\n          queue.insert(pointId2, newReachableDistance);\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Expand cluster\r\n *\r\n * @param {number} clusterId\r\n * @param {PriorityQueue} queue\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nOPTICS.prototype._expandCluster = function(clusterId, queue) {\r\n  var queueElements = queue.getElements();\r\n\r\n  for (var p = 0, l = queueElements.length; p < l; p++) {\r\n    var pointId = queueElements[p];\r\n    if (this._processed[pointId] === undefined) {\r\n      var neighbors = this._regionQuery(pointId);\r\n      this._processed[pointId] = 1;\r\n\r\n      this.clusters[clusterId].push(pointId);\r\n      this._orderedList.push(pointId);\r\n\r\n      if (this._distanceToCore(pointId) !== undefined) {\r\n        this._updateQueue(pointId, neighbors, queue);\r\n        this._expandCluster(clusterId, queue);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Calculating distance to cluster core\r\n *\r\n * @param {number} pointId\r\n * @returns {number}\r\n * @access protected\r\n */\r\nOPTICS.prototype._distanceToCore = function(pointId) {\r\n  var l = this.epsilon;\r\n  for (var coreDistCand = 0; coreDistCand < l; coreDistCand++) {\r\n    var neighbors = this._regionQuery(pointId, coreDistCand);\r\n    if (neighbors.length >= this.minPts) {\r\n      return coreDistCand;\r\n    }\r\n  }\r\n\r\n  return;\r\n};\r\n\r\n/**\r\n * Find all neighbors around given point\r\n *\r\n * @param {number} pointId\r\n * @param {number} epsilon\r\n * @returns {Array}\r\n * @access protected\r\n */\r\nOPTICS.prototype._regionQuery = function(pointId, epsilon) {\r\n  epsilon = epsilon || this.epsilon;\r\n  var neighbors = [];\r\n\r\n  for (var id = 0, l = this.dataset.length; id < l; id++) {\r\n    if (this.distance(this.dataset[pointId], this.dataset[id]) < epsilon) {\r\n      neighbors.push(id);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n};\r\n\r\n/******************************************************************************/\r\n// helpers\r\n\r\n/**\r\n * Calculate euclidean distance in multidimensional space\r\n *\r\n * @param {Array} p\r\n * @param {Array} q\r\n * @returns {number}\r\n * @access protected\r\n */\r\nOPTICS.prototype._euclideanDistance = function(p, q) {\r\n  var sum = 0;\r\n  var i = Math.min(p.length, q.length);\r\n\r\n  while (i--) {\r\n    sum += (p[i] - q[i]) * (p[i] - q[i]);\r\n  }\r\n\r\n  return Math.sqrt(sum);\r\n};\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = OPTICS;\r\n}\r\n"],"sourceRoot":""}